(base) admin1@admin:~$ cd spark/
(base) admin1@admin:~/spark$ cd spark-3.2.4-bin-hadoop2.7/
(base) admin1@admin:~/spark/spark-3.2.4-bin-hadoop2.7$ cd bin
(base) admin1@admin:~/spark/spark-3.2.4-bin-hadoop2.7/bin$ ./spark-shell
23/05/23 12:05:00 WARN Utils: Your hostname, admin resolves to a loopback address: 127.0.1.1; using 172.16.1.63 instead (on interface enp1s0)
23/05/23 12:05:00 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
23/05/23 12:05:04 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
java.lang.IllegalAccessError: class org.apache.spark.storage.StorageUtils$ (in unnamed module @0x3892c249) cannot access class sun.nio.ch.DirectBuffer (in module java.base) because module java.base does not export sun.nio.ch to unnamed module @0x3892c249
  at org.apache.spark.storage.StorageUtils$.<init>(StorageUtils.scala:213)
  at org.apache.spark.storage.StorageUtils$.<clinit>(StorageUtils.scala)
  at org.apache.spark.storage.BlockManagerMasterEndpoint.<init>(BlockManagerMasterEndpoint.scala:110)
  at org.apache.spark.SparkEnv$.$anonfun$create$9(SparkEnv.scala:348)
  at org.apache.spark.SparkEnv$.registerOrLookupEndpoint$1(SparkEnv.scala:287)
  at org.apache.spark.SparkEnv$.create(SparkEnv.scala:336)
  at org.apache.spark.SparkEnv$.createDriverEnv(SparkEnv.scala:191)
  at org.apache.spark.SparkContext.createSparkEnv(SparkContext.scala:277)
  at org.apache.spark.SparkContext.<init>(SparkContext.scala:460)
  at org.apache.spark.SparkContext$.getOrCreate(SparkContext.scala:2700)
  at org.apache.spark.sql.SparkSession$Builder.$anonfun$getOrCreate$2(SparkSession.scala:949)
  at scala.Option.getOrElse(Option.scala:189)
  at org.apache.spark.sql.SparkSession$Builder.getOrCreate(SparkSession.scala:943)
  at org.apache.spark.repl.Main$.createSparkSession(Main.scala:106)
  ... 55 elided
<console>:14: error: not found: value spark
       import spark.implicits._
              ^
<console>:14: error: not found: value spark
       import spark.sql
              ^
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 3.2.4
      /_/
         
Using Scala version 2.12.15 (OpenJDK 64-Bit Server VM, Java 17.0.7)
Type in expressions to have them evaluated.
Type :help for more information.

scala> :paste
// Entering paste mode (ctrl-D to finish)

// taking three variables
var a: Int = 70
var b: Int = 40
var c: Int = 100
// condition_1
if (a &gt; b)
{
// condition_2
if(a &gt; c)
{
println(&quot;a is largest&quot;);
}
else
{
println(&quot;c is largest&quot;)
}
}
else
{
// condition_3
if(b &gt; c)
{
println(&quot;b is largest&quot;)
}
else
{
println(&quot;c is largest&quot;)
}
}

// Exiting paste mode, now interpreting.

<console>:6: error: ')' expected but ';' found.
       if (a &gt; b)
                ^
<console>:6: error: ';' expected but ')' found.
       if (a &gt; b)
                   ^

scala> :paste
// Entering paste mode (ctrl-D to finish)

// taking three variables
var a: Int = 70
var b: Int = 40
var c: Int = 100
// condition_1
if (a &gt; b)
{
// condition_2
if(a &gt; c)
{
println(&quot;a is largest&quot;);
}
else
{
println(&quot;c is largest&quot;)
}
}
else
{
// condition_3
if(b &gt; c)
{
println(&quot;b is largest&quot;)
}
else
{
println(&quot;c is largest&quot;)
}
}

// Exiting paste mode, now interpreting.

<pastie>:6: error: ')' expected but ';' found.
if (a &gt; b)
         ^
<pastie>:6: error: ';' expected but ')' found.
if (a &gt; b)
            ^

scala> :paste
// Entering paste mode (ctrl-D to finish)

// taking three variables
var a: Int = 70
var b: Int = 40
var c: Int = 100
// condition_1
if (a &gt; b)
{
// condition_2
if(a &gt; c)
{
println(&quot;a is largest&quot;);
}
else
{
println(&quot;c is largest&quot;)
}
}
else
{
// condition_3
if(b &gt; c)
{
println(&quot;b is largest&quot;)
}
else
{
println(&quot;c is largest&quot;)
}
}

// Exiting paste mode, now interpreting.

<pastie>:6: error: ')' expected but ';' found.
if (a &gt; b)
         ^
<pastie>:6: error: ';' expected but ')' found.
if (a &gt; b)
            ^

scala> var a:Int =70
a: Int = 70

scala> var b:Int = 40
b: Int = 40

scala> var c: Int = 100
c: Int = 100

scala> if (a>b)
     | {
     | if(a>c)
     | {println('a is largest');
<console>:4: error: unclosed character literal (or use " not ' for string literal)
       {println('a is largest');
                             ^

scala> if (a>b)
     | {
     | if(a>c)
     | {println("a is largest");
     | }
     | else
     | {
     | println("c is largest");
     | }
     | }
c is largest

scala> :paste
// Entering paste mode (ctrl-D to finish)

var a: Int = 70
var b: Int = 40
var c: Int = 100
// condition_1
if (a > b)
{
// condition_2
if(a > c)
{
println('a is largest');
}
else
{
println('c is largest')
}
}
else
{
// condition_3
if(b > c)
{
println('b is largest)
}
else
{
println('c is largest')
}

// Exiting paste mode, now interpreting.

<pastie>:10: error: unclosed character literal (or use " not ' for string literal)
println('a is largest');
                     ^
<pastie>:14: error: unclosed character literal (or use " not ' for string literal)
println('c is largest')
                     ^
<pastie>:26: error: unclosed character literal (or use " not ' for string literal)
println('c is largest')
                     ^

scala> // taking three variables

scala> var a: Int = 70
a: Int = 70

scala> var b: Int = 40
b: Int = 40

scala> var c: Int = 100
c: Int = 100

scala> // condition_1

scala> if (a > b)
     | {
     | // condition_2
     | if(a > c)
     | {
     | println('a is largest');
<console>:6: error: unclosed character literal (or use " not ' for string literal)
       println('a is largest');
                            ^

scala> }
<console>:1: error: eof expected but '}' found.
       }
       ^

scala> else
<console>:1: error: illegal start of definition
       else
       ^

scala> {
     | println('c is largest')
<console>:2: error: unclosed character literal (or use " not ' for string literal)
       println('c is largest')
                            ^

scala> }
<console>:1: error: eof expected but '}' found.
       }
       ^

scala> }
<console>:1: error: eof expected but '}' found.
       }
       ^

scala> else
<console>:1: error: illegal start of definition
       else
       ^

scala> {
     | // condition_3
     | if(b > c)
     | {
     | println('b is largest')
<console>:5: error: unclosed character literal (or use " not ' for string literal)
       println('b is largest')
                            ^

scala> }
<console>:1: error: eof expected but '}' found.
       }
       ^

scala> else
<console>:1: error: illegal start of definition
       else
       ^

scala> {
     | println('c is largest')
<console>:2: error: unclosed character literal (or use " not ' for string literal)
       println('c is largest')
                            ^

scala> }
<console>:1: error: eof expected but '}' found.
       }
       ^

scala> :paste
// Entering paste mode (ctrl-D to finish)

// taking three variables
var a: Int = 70
var b: Int = 40
var c: Int = 100
// condition_1
if (a > b)
{
// condition_2
if(a > c)
{
println('a is largest');
}
else
{
println('c is largest')
}
}
else
{
// condition_3
if(b > c)
{
println('b is largest')
}
else
{
println('c is largest')
}
}

// Exiting paste mode, now interpreting.

<pastie>:11: error: unclosed character literal (or use " not ' for string literal)
println('a is largest');
                     ^
<pastie>:15: error: unclosed character literal (or use " not ' for string literal)
println('c is largest')
                     ^
<pastie>:23: error: unclosed character literal (or use " not ' for string literal)
println('b is largest')
                     ^
<pastie>:27: error: unclosed character literal (or use " not ' for string literal)
println('c is largest')
                     ^

scala> :paste
// Entering paste mode (ctrl-D to finish)

// taking three variables
var a: Int = 70
var b: Int = 40
var c: Int = 100
// condition_1
if (a > b)
{
// condition_2
if(a > c)
{
println("a is largest")
}
else
{
println("c is largest")
}
}
else
{
// condition_3
if(b > c)
{
println("b is largest")
}
else
{
println("c is largest")
}
}

// Exiting paste mode, now interpreting.

c is largest
a: Int = 70
b: Int = 40
c: Int = 100

scala> :paste
// Entering paste mode (ctrl-D to finish)

var nums1 = Array(1789, 2035, 1899, 1456, 2013)
println(&quot;Orginal array:&quot;)
for ( x &lt;- nums1) {
print(s&quot;${x}, &quot;)
}
var result1= test(nums1)
println(&quot;\nReversed array:&quot;)
for ( x &lt;- result1) {
print(s&quot;${x}, &quot;)
}

def test(nums: Array[Int]): Array[Int] = {
var temp1 = 0
var temp2 = 0
var index_position = 0
var index_last_pos = nums.length - 1
while (index_position &lt; index_last_pos) {
temp1 = nums(index_position)
temp2 = nums(index_last_pos)
nums(index_position) = temp2
nums(index_last_pos) = temp1
index_position += 1
index_last_pos -= 1
}
nums
}

// Exiting paste mode, now interpreting.

<pastie>:2: error: ')' expected but ';' found.
println(&quot;Orginal array:&quot;)
             ^
<pastie>:2: error: illegal start of definition
println(&quot;Orginal array:&quot;)
                                  ^
<pastie>:3: error: ';' expected but ')' found.
for ( x &lt;- nums1) {
                   ^
<pastie>:7: error: illegal start of definition
println(&quot;\nReversed array:&quot;)
                                     ^
<pastie>:8: error: ';' expected but ')' found.
for ( x &lt;- result1) {
                     ^

scala> :paste
// Entering paste mode (ctrl-D to finish)

var nums1 = Array(1789, 2035, 1899, 1456, 2013)
println("Orginal array:")
for ( x <-nums1) {
print(s"${x},")
}
var result1= test(nums1)
println("\nReversed array:")
for ( x <-result1) {
print(s"${x},")
}

def test(nums: Array[Int]): Array[Int] = {
var temp1 = 0
var temp2 = 0
var index_position = 0
var index_last_pos = nums.length - 1
while (index_position < index_last_pos) {
temp1 = nums(index_position)
temp2 = nums(index_last_pos)
nums(index_position) = temp2
nums(index_last_pos) = temp1
index_position += 1
index_last_pos -= 1
}
nums
}

// Exiting paste mode, now interpreting.

Orginal array:
1789,2035,1899,1456,2013,
Reversed array:
2013,1456,1899,2035,1789,nums1: Array[Int] = Array(2013, 1456, 1899, 2035, 1789)
result1: Array[Int] = Array(2013, 1456, 1899, 2035, 1789)
test: (nums: Array[Int])Array[Int]

scala> :paste
// Entering paste mode (ctrl-D to finish)

var IntArray1 = Array(10,11,12,13,14,15)
var IntArray2 = Array(20,21,22,23,24,25)
var IntArray3 = new Array[Int](12)
var count:Int=0
var count1:Int=0

// Merge IntArray1 and IntArray2 into IntArray3.
while(count<12)
{
if(count<6)
IntArray3(count)=IntArray1(count)
else
{
IntArray3(count)=IntArray2(count1)
count1=count1+1
}
count=count+1
}

println("Elements of merged array:")
count=0
while(count<12)
{
printf("%d",IntArray3(count))
count=count+1
}

// Exiting paste mode, now interpreting.

Elements of merged array:
101112131415202122232425IntArray1: Array[Int] = Array(10, 11, 12, 13, 14, 15)
IntArray2: Array[Int] = Array(20, 21, 22, 23, 24, 25)
IntArray3: Array[Int] = Array(10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25)
count: Int = 12
count1: Int = 6
count: Int = 12

